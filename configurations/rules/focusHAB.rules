import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.library.tel.types.CallType

/* 
rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end
*/

rule Netatmo_Noise_Hue_3
when
	Item Netatmo_Winti_Indoor_Noise changed
then
/* 	var HSBType col = Hue_Color_StehlampeUnten.state as HSBType*/
/*	sendCommand(Hue_Color_GangUnten,col)*/
	var String colorString = Netatmo_Winti_Indoor_Noise.state +",90.0,100"
	logInfo("**** Rule Netatmo_Noise_Hue_3", colorString)
	sendCommand(Hue_Color_3, colorString)
end


rule SendMailTest
  when Item Mail_Test received update ON
then
  var String mailSubject = "Mail Test" + now
  logInfo("**** Send Mail Test", mailSubject)
  sendMail( "david@davidulrich.ch" , mailSubject , "Mail Test");
end

rule TwitterTest
  when Item Twitter_Test received update ON
then
  var String tweetMsg = "Tweet Test" + now
  logInfo("**** Tweet Test", tweetMsg)
  sendTweet(tweetMsg)
end

rule NeueNetzwerkDinge
	when Item Fing_NumHosts changed
then 
	
	var String netzzahl = Fing_NumHosts.state.toString
	logInfo("***** Fing Number", netzzahl)
end	

rule "Light scene"
	when
		Item Lamp_Scene received command
	then
		switch(receivedCommand) {
			case 0 : sendCommand(Hue_OnOff, OFF)
			case 1 : {
				sendCommand(Hue_OnOff, ON);
				sendCommand(Hue_Color_1, "240,100,100");
				sendCommand(Hue_Color_2, "0,100,100");
				sendCommand(Hue_Color_3, "240,100,100");
				}
			case 2 : {
				sendCommand(Hue_OnOff, ON);
				sendCommand(Hue_Color_1, "60,100,10");
				sendCommand(Hue_Color_2, "60,100,10");
				sendCommand(Hue_Color_3, "60,100,10");
				}
		}
end