import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.openhab.library.tel.types.CallType

rule StartUp
when System started
then 
	sendCommand(DeviceOwner, "David")
end


rule XMBC_Title_Changed
when
	Item XMBC_Player_Title changed 
then
	say("Now playing item" + XMBC_Player_Title)
	
end


rule OwnersDeviceOnNetwork
when 
	Item NetworkHealth_OwnersDevice received update ON
then
	if (XMBC_Player_State.state != "Play") {
		var String msg = DeviceOwner.state + " hat den Raum betreten..."
		logInfo("Rule OwnersDeviceOnNetwork", msg)
		
		//Lampen an
		sendCommand(HueLights, ON)
		
		Thread::sleep(2000)
		
		say("Hello Again, What about music?")
		
		Thread::sleep(1000)
		
		sendXbmcNotification("localhost",8081, "XBMC Aktivierung!", msg)
		sendCommand(XMBC_Player_PlayPause, ON)
	//	sendCommand(Hue_Color_3, "0,100,100")
	} else {
		logInfo("Rule OwnersDeviceOnNetwork", "state war play *************" + XMBC_Player_State.state)
	}
	
end

rule OwnersDeviceOffNetwork
when
	Item NetworkHealth_OwnersDevice received update OFF
then
	if (XMBC_Player_State.state == "Play") {
		var String msg = DeviceOwner.state + " hat den Raum verlassen..."
		logInfo("Rule OwnersDeviceOffNetwork", msg)
		sendXbmcNotification("localhost",8081, "XBMC Deaktivierung!", msg)
		sendCommand(XMBC_Player_Stop, ON)
		
		//Lampen an
		sendCommand(HueLights, OFF)

	} else {
		logInfo("Rule OwnersDeviceOffNetwork", "state war nicht play *************" + XMBC_Player_State.state)
	}
end
	
